@code {
/* 
* Name: JobOrderPage.razor
* Date: 24/04/2025
* Description: Job order page. List all job orders in the system.
*/
}

@page "/joborderpage"
@using MechanicalShop.Data
@using MySqlConnector
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Job Orders</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}

<div class="d-grid gap-2 col-6 mx-auto my-3">
    <button type="button" class="btn btn-primary" @onclick="()=> GoToIndividualPage(new JobOrder())">Add New Order</button>
</div>
<table class="table align-middle table-striped">
    <thead>
        <tr>
            <th scope="col" class="text-center">ID</th>
            <th scope="col" class="text-center">First Name</th>
            <th scope="col" class="text-center">Last Name</th>
            <th scope="col" class="text-center">Order Date</th>
            <th scope="col" class="text-center">Total Price</th>
            <th scope="col" class="text-center">Status</th>
            <th scope="col" class="text-center">View/Update</th>
            <th scope="col" class="text-center">Delete</th>
        </tr>
        @foreach (JobOrder myJobOrder in jobOrders)
        {
            <tr>
                <td>@myJobOrder.OrderId</td>
                <td>@myJobOrder.FirstName</td>
                <td>@myJobOrder.LastName</td>
                <td class="text-center">@myJobOrder.OrderDate.ToString("yyyy-MM-dd")</td>
                <td class="text-end">@myJobOrder.TotalPrice.ToString("N2")</td>
                <td class="text-center">@jobStatus[myJobOrder.Status]</td>
                <td class="text-center"><button type="button" class="btn btn-primary btn-sm" @onclick="()=> GoToIndividualPage(myJobOrder)">View/Update</button></td>
                <td class="text-center"><button type="button" class="btn btn-danger btn-sm" @onclick="()=> DeleteJobOrder(myJobOrder)">Delete</button></td>
            </tr>
        }
    </thead>
</table>


@code {
    private List<JobOrder> jobOrders;
    private List<Inventory> inventories;
    private JobOrder oldJobOrder;
    private string[] jobStatus = { "New", "In Progress", "Pending", "Cancelled", "Completed" };
    private MySqlConnectionStringBuilder builder;
    private MySqlConnection connection;
    private string? errorMessage;

    /* 
     * Name: OnInitializedAsync
     * Input: -
     * Output: -
     * Description: Initialize variables and load data from database when the page is loaded.
    */
    protected override async Task OnInitializedAsync()
    {
        jobOrders = new List<JobOrder>();
        inventories = new List<Inventory>();
        builder = new MySqlConnectionStringBuilder
            {
                Server = "localhost",
                Database = "cprg211project",
                UserID = "root",
                Password = "1234",
            };
        connection = new MySqlConnection(builder.ConnectionString);
        LoadJobOrder();
        LoadInventory();
        errorMessage = "";
    }
    
    /* 
     * Name: LoadJobOrder
     * Input: -
     * Output: -
     * Description: Read job order from data base.
    */
    private void LoadJobOrder()
    {
        connection.Open();
        string sql = "SELECT * FROM job_order";
        MySqlCommand command = new MySqlCommand(sql, connection);
        using (MySqlDataReader reader = command.ExecuteReader())
        {
            while (reader.Read())
            {
                string orderId = Convert.ToString(reader["order_id"]);
                string customerId = Convert.ToString(reader["customer_id"]);
                DateTime orderDate = Convert.ToDateTime(reader["order_date"]);
                string workDescription = Convert.ToString(reader["work_description"]);
                double serviceCharge = Convert.ToDouble(reader["service_charge"]);
                double totalPrice = Convert.ToDouble(reader["total_price"]);
                int status = Convert.ToInt32(reader["status"]);

                JobOrder newJobOrder = new JobOrder(orderId, customerId, orderDate, workDescription, serviceCharge, totalPrice, status, "", "");
                jobOrders.Add(newJobOrder);
            }
        }
        /* Read parts in each job order from database */
        foreach (JobOrder myJobOrder in jobOrders)
        {
            sql = $"SELECT * FROM customer WHERE customer_id = '{myJobOrder.CustomerId}'";
            command = new MySqlCommand(sql, connection);
            using (MySqlDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    myJobOrder.FirstName = Convert.ToString(reader["first_name"]);
                    myJobOrder.LastName = Convert.ToString(reader["last_name"]);
                }
            }

            sql = $"SELECT part_id, order_quantity FROM job_order_inventory WHERE order_id = '{myJobOrder.OrderId}'";
            command = new MySqlCommand(sql, connection);
            using (MySqlDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    string partId = Convert.ToString(reader["part_id"]);
                    int orderQuantity = Convert.ToInt32(reader["order_quantity"]);
                    JobOrderItem newJobOrderItem = new JobOrderItem(partId, orderQuantity);
                    myJobOrder.JobOrderItems.Add(newJobOrderItem);
                }
            }
        }
        connection.Close();
    }
    
    /* 
     * Name: LoadInventory
     * Input: -
     * Output: -
     * Description: Read part information for showing in the page.
    */
    private void LoadInventory()
    {
        connection.Open();
        string sql = "SELECT * FROM inventory";
        MySqlCommand command = new MySqlCommand(sql, connection);
        using (MySqlDataReader reader = command.ExecuteReader())
        {
            while (reader.Read())
            {
                string partId = Convert.ToString(reader["part_id"]);
                string brand = Convert.ToString(reader["brand"]);
                string model = Convert.ToString(reader["model"]);
                string partName = Convert.ToString(reader["part_name"]);
                double unitPrice = Convert.ToDouble(reader["unit_price"]);
                int inventoryQuantity = Convert.ToInt32(reader["inventory_quantity"]);

                Inventory newInventory = new Inventory(partId, brand, model, partName, unitPrice, inventoryQuantity);
                inventories.Add(newInventory);
            }
        }
        connection.Close();
    }

    /* 
     * Name: DeleteJobOrder
     * Input: myJobOrder   Job order object to be deleted
     * Output: -
     * Description: Delete job order from the system and database
    */
    private void DeleteJobOrder(JobOrder myJobOrder)
    {
        string sql;
        MySqlCommand command;

        /* Update number of parts in the database. */
        foreach (Inventory myInventory in inventories)
        {
            int index = myJobOrder.JobOrderItems.FindIndex(x => x.PartId == myInventory.PartId);
            if (index > -1)
            {
                myInventory.InventoryQuantity += myJobOrder.JobOrderItems[index].OrderQuantity;
            }

            connection.Open();
            sql = $"UPDATE inventory SET inventory_quantity = {myInventory.InventoryQuantity} WHERE part_id = '{myInventory.PartId}'";
            command = new MySqlCommand(sql, connection);
            command.ExecuteNonQuery();
            connection.Close();
        }

        oldJobOrder = new JobOrder(myJobOrder.OrderId, myJobOrder.CustomerId, myJobOrder.OrderDate, myJobOrder.WorkDescription, myJobOrder.ServiceCharge, myJobOrder.TotalPrice, myJobOrder.Status, myJobOrder.FirstName, myJobOrder.LastName);
        jobOrders.Remove(myJobOrder);

        connection.Open();

        sql = $"DELETE FROM job_order_inventory WHERE order_id = '{oldJobOrder.OrderId}'";
        command = new MySqlCommand(sql, connection);
        command.ExecuteNonQuery();

        sql = $"DELETE FROM job_order WHERE order_id = '{oldJobOrder.OrderId}' AND customer_id = '{oldJobOrder.CustomerId}' AND order_date = '{oldJobOrder.OrderDate}' AND work_description = '{oldJobOrder.WorkDescription}' AND service_charge = {oldJobOrder.ServiceCharge} AND total_price = {oldJobOrder.TotalPrice} AND status = {oldJobOrder.Status}";
        command = new MySqlCommand(sql, connection);
        command.ExecuteNonQuery();

        connection.Close();
    }

    /* 
     * Name: GoToIndividualPage
     * Input: myJobOrder   Job order object to be viewed or updated
     * Output: -
     * Description: Move to job order detail page.
    */
    void GoToIndividualPage(JobOrder myJobOrder)
    {
        int numCustomer = 0;
        int numInventory = 0;

        string sql;
        MySqlCommand command;

        connection.Open();

        sql = "SELECT COUNT(*) FROM customer";
        command = new MySqlCommand(sql, connection);
        numCustomer = Convert.ToInt32(command.ExecuteScalar());

        sql = "SELECT COUNT(*) FROM inventory";
        command = new MySqlCommand(sql, connection);
        numInventory = Convert.ToInt32(command.ExecuteScalar());

        connection.Close();

        try
        {
            if (numCustomer == 0 || numInventory == 0)
            {
                throw new Exception("There must be at least one customer and one part in the system.");
            }
            errorMessage = "";
            Navigation.NavigateTo($"/joborderindividualpage?updateOrderId={myJobOrder.OrderId}");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
